<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teches on Zhu Xingda</title>
    <link>https://blog.xingda.space/tech/</link>
    <description>Recent content in Teches on Zhu Xingda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 29 Apr 2025 16:40:40 +0800</lastBuildDate>
    <atom:link href="https://blog.xingda.space/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【Linux】Linux 服务器抓包记录</title>
      <link>https://blog.xingda.space/tech/tcpdump_usage_notebook/</link>
      <pubDate>Tue, 29 Apr 2025 16:40:40 +0800</pubDate>
      <guid>https://blog.xingda.space/tech/tcpdump_usage_notebook/</guid>
      <description>&lt;p&gt;经常遇到需要在服务器抓包分析问题的情况，这里记录一下常用的抓包工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Flink】Flink 任务执行和部署原理</title>
      <link>https://blog.xingda.space/tech/flink_job_execute_deployment/</link>
      <pubDate>Thu, 24 Apr 2025 17:22:01 +0800</pubDate>
      <guid>https://blog.xingda.space/tech/flink_job_execute_deployment/</guid>
      <description>&lt;p&gt;分析 Flink 任务完整的提交过程，主要关注在这个过程中任务的格式变化和调度执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ORC 和 Parquet 文件格式</title>
      <link>https://blog.xingda.space/tech/data_storage_file_format/</link>
      <pubDate>Mon, 21 Apr 2025 10:43:15 +0800</pubDate>
      <guid>https://blog.xingda.space/tech/data_storage_file_format/</guid>
      <description>&lt;p&gt;ORC 和 Parquet 是两种常用的列式存储格式，都支持 schema 定义、索引、压缩等特性，本文分别分析两种文件的格式和实现原理&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 和 Java 在多线程、内存模型、垃圾回收上的对比</title>
      <link>https://blog.xingda.space/tech/golang_java_compare/</link>
      <pubDate>Thu, 10 Apr 2025 17:14:15 +0800</pubDate>
      <guid>https://blog.xingda.space/tech/golang_java_compare/</guid>
      <description>线程模型 1. JDK 19 以下 版本（排除最早的 Green Threads 老版本） 采用 1 ：1 的线程模型，即每个用户线程对应一个内核线程&#xA;线程的创建、销毁、切换都由操作系统的调度器完成，JVM 不参与 目前主流操作系统使用抢占式线程调度策略，当 JVM 线程阻塞时，比如 Object.wait()、Thread.sleep()、Thread.join()、LockSupport.park() 等导致线程进入 WAITING 或 TIMED_WAITING 状态，或者抢占 synchronized 锁时进入 BLOCKED 状态，线程都会释放 CPU，只有回到 RUNNABLE 状态后线程才能被系统调度器重新调度进入 RUNNING 状态 JVM 线程在遇到 I/O 阻塞时仍然保持 RUNNABLE 状态，但其对应的内核态线程会被操作系统挂起直到 I/O 操作完成 JVM 的最大线程数出了自身的配置外，还受限于 Linux Kernel 的线程数限制 JVM 的线程创和切换涉及用户态和内核态的切换、CPU 上下文切换，开销较大，通常采用线程池来减少线程创建的开销 2. JDK 19 及以上版本 参考资料 JDK 19 引入了 virtual thread 虚拟线程，采用 M：N 的线程模型，一个内核线程对应一个用户态的平台线程，一个平台线程对应多个虚拟线程&#xA;虚拟线程的调度、销毁、切换都由 JVM 完成，不需要操作系统调度器参与 JVM 对虚拟线程采用协作式线程调度策略，当线程阻塞时会主动从平台线程上卸载，让调度器调度其他线程运行 虚拟线程的最大线程数不受 Linux Kernel 的线程数限制，只受限于 JVM 的配置和系统内存，可以创建大量虚拟线程用以处理 I/O 密集型任务 虚拟线程的创建和切换都在用户态完成，避免了用户态和内核态的切换、CPU 上下文切换的开销 3.</description>
    </item>
    <item>
      <title>分布式协议总结</title>
      <link>https://blog.xingda.space/tech/distribute_system_protocal/</link>
      <pubDate>Sun, 30 Mar 2025 22:29:20 +0800</pubDate>
      <guid>https://blog.xingda.space/tech/distribute_system_protocal/</guid>
      <description>&lt;p&gt;总结多种分布式协议的实现原理&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Flink】Flink Watermark 产生和传递原理</title>
      <link>https://blog.xingda.space/tech/flink_watermark_source_code/</link>
      <pubDate>Tue, 25 Mar 2025 19:27:37 +0800</pubDate>
      <guid>https://blog.xingda.space/tech/flink_watermark_source_code/</guid>
      <description>&lt;p&gt;Flink Watermark 的产生原理和传递过程&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Flink】Flink Task 和 OperatorChain 源码</title>
      <link>https://blog.xingda.space/tech/flink_task_inside_source_code/</link>
      <pubDate>Sun, 23 Mar 2025 12:26:28 +0800</pubDate>
      <guid>https://blog.xingda.space/tech/flink_task_inside_source_code/</guid>
      <description>&lt;p&gt;Flink Task 的部署过程&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Kubernetes】记录一些在使用 Kubernetes 时遇到的问题</title>
      <link>https://blog.xingda.space/tech/kubernetes_deploy_nodebook/</link>
      <pubDate>Tue, 25 Feb 2025 16:57:16 +0800</pubDate>
      <guid>https://blog.xingda.space/tech/kubernetes_deploy_nodebook/</guid>
      <description>&lt;p&gt;记录一些在使用 Kubernetes 时遇到的问题和概念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Paimon_table_with_key_and_lsm_tree</title>
      <link>https://blog.xingda.space/tech/paimon_table_with_key_and_lsm_tree/</link>
      <pubDate>Wed, 19 Feb 2025 14:37:57 +0800</pubDate>
      <guid>https://blog.xingda.space/tech/paimon_table_with_key_and_lsm_tree/</guid>
      <description>&lt;p&gt;Paimon 以数据表是否有主键，将表分为 &lt;code&gt;Append Only Table&lt;/code&gt; 和 &lt;code&gt;Primary Key Table&lt;/code&gt;，对数据的操作前者只支持 Insert，后者还支持 Update 和 Delete，本文简单分析 Paimon 主键表的原理和格式&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Paimon】Paimon 表排序</title>
      <link>https://blog.xingda.space/tech/paimon_sink_clustring/</link>
      <pubDate>Wed, 19 Feb 2025 11:14:58 +0800</pubDate>
      <guid>https://blog.xingda.space/tech/paimon_sink_clustring/</guid>
      <description>&lt;p&gt;Paimon （1.0）对 Bucket Unaware 的 Append Only Table 支持写入时排序以提升查询效率，同时对分 Bucket 的 Append Only Table和 Dynamic Bucket 的 Primary Key Table ，提供了异步的 Sort Compact 支持。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Flink】Flink Data Sink API</title>
      <link>https://blog.xingda.space/tech/flink_sink_api/</link>
      <pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.xingda.space/tech/flink_sink_api/</guid>
      <description>&lt;p&gt;新的 Flink Sink API 取代了旧的 SinkFunction API，以提供更灵活的功能&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Ray】分布式计算框架 Ray 入门</title>
      <link>https://blog.xingda.space/tech/ray_framework_init/</link>
      <pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.xingda.space/tech/ray_framework_init/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ray&lt;/strong&gt; 是一个开源的分布式计算框架，当前主要被应用于机器学习领域。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Kubernetes】高可用 Kubernetes 集群搭建（with kubeadm）</title>
      <link>https://blog.xingda.space/tech/high_availability_k8s_cluster_build/</link>
      <pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.xingda.space/tech/high_availability_k8s_cluster_build/</guid>
      <description>&lt;p&gt;利用 kubeadm 搭建高可用 Kubernetes 集群的流程记录&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Flink】Data Source API 结构及实现</title>
      <link>https://blog.xingda.space/tech/flink_source_api/</link>
      <pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.xingda.space/tech/flink_source_api/</guid>
      <description>&lt;p&gt;Flink 1.11 引入新的 &lt;strong&gt;Data Source API&lt;/strong&gt; 以取代 &lt;strong&gt;SourceFunction&lt;/strong&gt; 接口，本文将简述其结构，以便针对某个数据源开发自定义的 Source 连接器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Flink】Flink Kubernetes Application Mode 启动分析</title>
      <link>https://blog.xingda.space/tech/flink_kubernetes_application_mode/</link>
      <pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.xingda.space/tech/flink_kubernetes_application_mode/</guid>
      <description>&lt;p&gt;梳理 Flink 在 Kubernetes Application Mode 下启动任务的过程，分析为什么 Flink SQL 任务不能以 Application Mode 运行&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Flink】Fault Tolerance 原理和实现</title>
      <link>https://blog.xingda.space/tech/flink_fault_tolerance/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.xingda.space/tech/flink_fault_tolerance/</guid>
      <description>&lt;p&gt;Flink 是如何在程序异常后恢复运行的，本文简述一下其中的原理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Flink】Taskmanager 内存管理</title>
      <link>https://blog.xingda.space/tech/flink_memory_management/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.xingda.space/tech/flink_memory_management/</guid>
      <description>&lt;p&gt;Flink Taskmanager 的内存划分和调整策略。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
